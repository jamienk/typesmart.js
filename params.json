{"name":"TypeSmart.js","tagline":"JavaScript to make textarea-like objects typographically smart. Automatic smart quotes, ellipsis, em - dashes and much more!","body":"TypeSmart\r\n=========\r\nTypeSmart is an extensible and customizable framework for making textareas and contenteditable elements “smart”.\r\nTypeSmart was built with the intention to bring typographic niceties to on-page editing spaces.\r\n\r\n#### Features\r\n- **“Smart quotes”** instead of **\"dumb quotes\"**.\r\n- Automatic ellipsis (…) instead of three periods (...).\r\n- Automatic em-dash (—) instead of minus minus (--).\r\n- Correct apostrophe: **Don't** use straight quotes for apostrophe. Just **don’t**!\r\n\r\n#### Using TypeSmart\r\n```html\r\n<!-- Source TypeSmart into your page. -->\r\n<script\r\n   type='text/javascript'\r\n   src='//github.com/sujeetgholap/typesmart.js/raw/master/typesmart.js'>\r\n</script>\r\n\r\n<!-- Make editing areas smart by adding the classes\r\n     'typeSmart' and 'typeSmartTypography' to them. -->\r\n<textarea class='typeSmart typeSmartTypography'></textarea>\r\n<div contenteditable='true' class='typeSmart typeSmartTypography'></div>\r\n\r\n<!-- Activate TypeSmart by including the following just before </body> tag. -->\r\n<script type='text/javascript'>\r\n  TypeSmart.init();\r\n</script>\r\n```\r\n\r\n#### Customizing TypeSmart\r\n```html\r\n<!-- Before initializing TypeSmart,\r\n     you can define certain variables to extend TypeSmart \r\n     1) my_replacements     : Replace a string by another.\r\n                              (workes for typed as well as pasted text)\r\n     2) my_paste_modifiers  : Functions to modify text when it is pasted into.   \r\n                              (only for pasted text)\r\n     3) my_custom_triggers  : Functions to be executed after typing certain text.\r\n                              (only for typed text)\r\n-->\r\n<script type='text/javascript'>\r\n  TypeSmart.my_replacements = {\r\n    'typeSmartGreetings': {\r\n      '/greet': 'Hello!',\r\n      '/farewell': 'Bye!'\r\n    },\r\n    'typeSmartRandom': {\r\n      '<foo>': 'BAR'\r\n    }\r\n  };\r\n  // The greetings will work in all editable areas who have 'typeSmartGreetings' class.\r\n  // For example, in the following textarea,\r\n  // <textarea class='typeSmart typeSmartGreetings typeSmartTypography'><textarea>\r\n  // in addition to typographical features, the following will happen:\r\n  // - Whenever you type '/greet' it will be replaced by 'Hello!'\r\n  // - Whenever pasted text has '/greet', it will get replaced by 'Hello!'\r\n  \r\n  TypeSmart.my_paste_modifiers = {\r\n    'typeSmartUppperCasePaste': {\r\n      'this string can be anything (should be unique)':\r\n           (function (text) {return text.toUpperCase();})\r\n    },\r\n    'typeSmartLowerCasePaste' : {\r\n      'make the text lowercase': (function (text) {return text.toLowerCase();})\r\n    }\r\n  };\r\n  // For example, whenever some text is pasted into\r\n  // <span contenteditable='true' class='typeSmart typeSmartCaseModPaste'></span>\r\n  // instead of the original text, an all-caps version of the text will be pasted.\r\n  //\r\n  // Function signature : Takes one string argument (pasted text) and returns one\r\n  //                      string (text to be actually pasted)\r\n  \r\n  TypeSmart.insertRandomgreeting = function () {\r\n    var greetings = ['hello',\r\n                     'hola',\r\n                     'namaste',\r\n                     'hi',\r\n                     'greetings'];\r\n    var random_greeting = greetings [Math.floor(Math.random() * greetings.length)];\r\n    \r\n    // Now insert the greeting at the cursor position\r\n    Cursor.new().insert(random_greeting + \"!\");\r\n    return false;\r\n  }\r\n  \r\n  TypeSmart.my_custom_triggers = {\r\n    'typeSmartCommands': {\r\n      '/randomGreeting': TypeSmart.insertRandomgreeting,\r\n      '?!': (function () {Cursor.new().deleteBackward(1); return true;})\r\n    }\r\n  };\r\n  // Whenever /randomGreeting is typed, it will be replaced by a random greeting\r\n  // instead. To enable this, class 'typeSmartCommands' should be added to\r\n  // the editing area.\r\n  //\r\n  // Function signature: Takes no arguments.\r\n  //                     Should do whatever needs to be done \r\n  //                     (inserting a random greeting in this case)\r\n  //                     Should return false indicating that the last typed\r\n  //                     character (here, 'g'), should not appear in editing area\r\n  //                     Should return true if the last typed letter is intended\r\n  //                     to appear. For example, the '?!' function deletes the\r\n  //                     character immediately before '?', but also lets the\r\n  //                     '!' to appear. So typing \"reallyy?!\" would actually\r\n  //                     result in \"really!\".\r\n  \r\n  TypeSmart.init();\r\n</script>\r\n```\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}